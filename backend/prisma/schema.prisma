// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String?
  phone       String
  password    String
  description String?
  followers   Follow[]  @relation("Following")
  following   Follow[]  @relation("Follower")
  products    Product[]
}

model Follow {
  id             Int  @id @default(autoincrement())
  follower       User @relation("Follower", fields: [followerId], references: [id])
  followerId     Int
  followedUser   User @relation("Following", fields: [followedUserId], references: [id])
  followedUserId Int
  profit         Int? @default(0)
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  models   Model[]
  products Product[]
}

model Model {
  id         Int        @id @default(autoincrement())
  name       String
  brand      Brand      @relation(fields: [brandId], references: [id])
  brandId    Int
  capacities Capacity[]
  colors     Color[]
  versions   Version[]
  products   Product[]
}

model Capacity {
  id       Int       @id @default(autoincrement())
  name     String
  model    Model     @relation(fields: [modelId], references: [id])
  modelId  Int
  products Product[]
}

model Color {
  id       Int       @id @default(autoincrement())
  name     String
  model    Model     @relation(fields: [modelId], references: [id])
  modelId  Int
  products Product[]
}

model Version {
  id       Int       @id @default(autoincrement())
  name     String
  model    Model     @relation(fields: [modelId], references: [id])
  modelId  Int
  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     Int
  model       Model    @relation(fields: [modelId], references: [id])
  modelId     Int
  capacity    Capacity @relation(fields: [capacityId], references: [id])
  capacityId  Int
  color       Color    @relation(fields: [colorId], references: [id])
  colorId     Int
  version     Version  @relation(fields: [versionId], references: [id])
  versionId   Int
  price       Int
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
}

model Tag {
  id         Int          @id @default(autoincrement())
  name       String
  category   TagCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model TagCategory {
  id   Int    @id @default(autoincrement())
  name String
  tags Tag[]
}
